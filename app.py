# app.py - Analisador de Texto Multidimensional
# Refer√™ncia Te√≥rica: Russell, S. J., & Norvig, P. (2020). 
# Artificial Intelligence: A Modern Approach (4th ed.). Pearson.
# Andr√© Luiz Rocha - 06/10/2025 - 10:32

import streamlit as st
import re
from collections import defaultdict
from textblob import TextBlob
import matplotlib.pyplot as plt
import pandas as pd

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Analisador de Texto Multidimensional",
    page_icon="üß†",
    layout="wide"
)

# Carregar CSS personalizado
def load_css():
    with open('style.css') as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

load_css()

# Defini√ß√£o de categorias universais baseadas na adapta√ß√£o do framework de Russell & Norvig
categories = {
    "Pensamento Subjetivo": [
        "acredito", "penso", "sinto", "acho", "imagino", "sonho", "desejo",
        "emo√ß√£o", "sentimento", "intui√ß√£o", "criatividade", "inspira√ß√£o",
        "paix√£o", "medo", "alegria", "tristeza", "amor", "esperan√ßa", "f√©",
        "consci√™ncia", "percep√ß√£o", "sensa√ß√£o", "vontade", "motiva√ß√£o",
        "opini√£o", "perspectiva", "vis√£o", "impress√£o"
    ],
    "Pensamento Objetivo": [
        "dados", "fatos", "evid√™ncias", "estudo", "pesquisa", "an√°lise",
        "l√≥gica", "raz√£o", "racional", "cient√≠fico", "estat√≠stica", "prova",
        "teoria", "hip√≥tese", "m√©todo", "sistema", "estrutura", "princ√≠pio",
        "lei", "regra", "padr√£o", "objetivo", "imparcial", "neutralidade",
        "verdade", "comprova√ß√£o", "valida√ß√£o", "experimento"
    ],
    "A√ß√£o Comportamental": [
        "comportamento", "a√ß√£o", "atitude", "decis√£o", "escolha", "rea√ß√£o",
        "intera√ß√£o", "comunica√ß√£o", "di√°logo", "conversa", "express√£o",
        "relacionamento", "coopera√ß√£o", "colabora√ß√£o", "confronto", "resposta",
        "gesto", "postura", "conduta", "procedimento", "iniciativa",
        "social", "conviv√™ncia", "empatia", "diplomacia"
    ],
    "A√ß√£o Pr√°tica": [
        "execu√ß√£o", "implementa√ß√£o", "aplica√ß√£o", "realiza√ß√£o", "produ√ß√£o",
        "constru√ß√£o", "desenvolvimento", "cria√ß√£o", "fabrica√ß√£o", "operacional",
        "pr√°tico", "concreto", "resultado", "efeito", "impacto", "performance",
        "efic√°cia", "efici√™ncia", "produtividade", "solu√ß√£o", "resolu√ß√£o",
        "projeto", "tarefa", "meta", "objetivo", "planejamento"
    ]
}

# T√≠tulo e descri√ß√£o
st.title("Analisador de Texto Multidimensional")
st.subheader("An√°lise de Sentimento + Eixos Conceituais para Qualquer Texto")

# Entrada do usu√°rio
texto = st.text_area("Digite o texto para an√°lise:", height=200, 
                     placeholder="Cole ou digite aqui qualquer texto (artigos, discursos, reda√ß√µes, relat√≥rios, etc.)...")

if st.button("Analisar Texto"):
    if not texto:
        st.warning("Por favor, insira um texto para an√°lise.")
    else:
        # 1. AN√ÅLISE DE SENTIMENTO
        st.header("üìä An√°lise de Sentimento")
        
        # An√°lise de sentimento com TextBlob
        try:
            blob = TextBlob(texto)
            # Tentar traduzir para melhor an√°lise se for portugu√™s
            if any(palavra in texto.lower() for palavra in ['√©', '√°', '√£', '√ß', '√µ']):
                texto_ingles = str(blob.translate(to='en'))
                blob = TextBlob(texto_ingles)
        except:
            blob = TextBlob(texto)  # Usar original se tradu√ß√£o falhar
            
        sentiment = blob.sentiment
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            polarity = sentiment.polarity
            if polarity > 0.1:
                emoji = "üòä"
                status = "Positivo"
            elif polarity < -0.1:
                emoji = "üòû"
                status = "Negativo"
            else:
                emoji = "üòê"
                status = "Neutro"
            
            st.metric(f"Polaridade {emoji}", f"{polarity:.3f}", status)
        
        with col2:
            subjectivity = sentiment.subjectivity
            if subjectivity > 0.6:
                nivel = "Alta"
            elif subjectivity > 0.3:
                nivel = "M√©dia"
            else:
                nivel = "Baixa"
            st.metric("Subjetividade", f"{subjectivity:.3f}", nivel)
        
        with col3:
            palavras_count = len(texto.split())
            st.metric("üìù Palavras", palavras_count)
        
        # Barra de sentimento visual
        st.markdown(f"""
        <div style="background: #ecf0f1; border-radius: 10px; padding: 5px; margin: 10px 0;">
            <div style="background: linear-gradient(90deg, #e74c3c 0%, #f39c12 50%, #2ecc71 100%); 
                        border-radius: 8px; padding: 10px; text-align: center; color: white; font-weight: bold;
                        width: {((polarity + 1) / 2) * 100}%">
                Sentimento: {polarity:.3f} ({status})
            </div>
        </div>
        """, unsafe_allow_html=True)

        # 2. AN√ÅLISE DOS EIXOS CONCEITUAIS
        st.header("üéØ An√°lise dos Eixos Conceituais")
        
        # Processamento do texto
        texto_limpo = re.sub(r'[^\w\s]', '', texto.lower())
        
        # Inicializar scores para todas as categorias
        scores = {categoria: 0 for categoria in categories.keys()}
        total_palavras_chave = 0
        
        # Contagem de ocorr√™ncias
        for categoria, palavras_chave in categories.items():
            for palavra in palavras_chave:
                pattern = r'\b' + re.escape(palavra) + r'\b'
                matches = re.findall(pattern, texto_limpo)
                scores[categoria] += len(matches)
                total_palavras_chave += len(matches)
        
        # C√°lculo de percentuais
        total_score = sum(scores.values())
        percentuais = {}
        
        for categoria, score in scores.items():
            if total_score > 0:
                percentuais[categoria] = (score / total_score) * 100
            else:
                percentuais[categoria] = 0

        # C√°lculo dos eixos principais
        pensamento_total = percentuais['Pensamento Subjetivo'] + percentuais['Pensamento Objetivo']
        acao_total = percentuais['A√ß√£o Comportamental'] + percentuais['A√ß√£o Pr√°tica']
        
        subjetividade_total = percentuais['Pensamento Subjetivo'] + percentuais['A√ß√£o Comportamental']
        objetividade_total = percentuais['Pensamento Objetivo'] + percentuais['A√ß√£o Pr√°tica']
        
        # Normalizar para 100% cada eixo
        if pensamento_total + acao_total > 0:
            pensamento_percent = (pensamento_total / (pensamento_total + acao_total)) * 100
            acao_percent = (acao_total / (pensamento_total + acao_total)) * 100
        else:
            pensamento_percent = acao_percent = 50
            
        if subjetividade_total + objetividade_total > 0:
            subjetivo_percent = (subjetividade_total / (subjetividade_total + objetividade_total)) * 100
            objetivo_percent = (objetividade_total / (subjetividade_total + objetividade_total)) * 100
        else:
            subjetivo_percent = objetivo_percent = 50

        # Exibi√ß√£o dos eixos
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üß† Eixo Pensamento vs A√ß√£o")
            
            # M√©tricas
            progresso_pensamento = pensamento_percent / 100
            progresso_acao = acao_percent / 100
            
            st.markdown(f"**Pensamento**: {pensamento_percent:.1f}%")
            st.progress(progresso_pensamento)
            
            st.markdown(f"**A√ß√£o**: {acao_percent:.1f}%")
            st.progress(progresso_acao)
            
            # Gr√°fico de pizza
            fig1, ax1 = plt.subplots(figsize=(6, 6))
            cores = ['#3498db', '#e74c3c']
            ax1.pie([pensamento_percent, acao_percent], 
                   labels=[f'Pensamento\n{pensamento_percent:.1f}%', f'A√ß√£o\n{acao_percent:.1f}%'],
                   colors=cores, autopct='%1.1f%%', startangle=90)
            ax1.axis('equal')
            st.pyplot(fig1)
        
        with col2:
            st.subheader("üìä Eixo Subjetivo vs Objetivo")
            
            # M√©tricas
            progresso_subjetivo = subjetivo_percent / 100
            progresso_objetivo = objetivo_percent / 100
            
            st.markdown(f"**Subjetivo**: {subjetivo_percent:.1f}%")
            st.progress(progresso_subjetivo)
            
            st.markdown(f"**Objetivo**: {objetivo_percent:.1f}%")
            st.progress(progresso_objetivo)
            
            # Gr√°fico de pizza
            fig2, ax2 = plt.subplots(figsize=(6, 6))
            cores = ['#9b59b6', '#2ecc71']
            ax2.pie([subjetivo_percent, objetivo_percent], 
                   labels=[f'Subjetivo\n{subjetivo_percent:.1f}%', f'Objetivo\n{objetivo_percent:.1f}%'],
                   colors=cores, autopct='%1.1f%%', startangle=90)
            ax2.axis('equal')
            st.pyplot(fig2)

        # 3. MATRIZ CONCEITUAL COMPLETA
        st.header("üéØ Matriz Conceitual Completa")
        
        matriz_html = f"""
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 20px 0;">
            <div style="background: linear-gradient(135deg, #e8f4fd, #b3d9ff); padding: 20px; border-radius: 10px; text-align: center; border: 2px solid #3498db;">
                <h4>üß† Pensamento</h4>
                <h5>Subjetivo</h5>
                <div style="font-size: 28px; font-weight: bold; color: #3498db;">{percentuais['Pensamento Subjetivo']:.1f}%</div>
                <small>Emo√ß√µes, intui√ß√µes, sentimentos</small>
            </div>
            <div style="background: linear-gradient(135deg, #e6f7e9, #99e699); padding: 20px; border-radius: 10px; text-align: center; border: 2px solid #2ecc71;">
                <h4>üß† Pensamento</h4>
                <h5>Objetivo</h5>
                <div style="font-size: 28px; font-weight: bold; color: #2ecc71;">{percentuais['Pensamento Objetivo']:.1f}%</div>
                <small>Dados, l√≥gica, fatos</small>
            </div>
            <div style="background: linear-gradient(135deg, #fff0f0, #ffb3b3); padding: 20px; border-radius: 10px; text-align: center; border: 2px solid #e74c3c;">
                <h4>‚ö° A√ß√£o</h4>
                <h5>Comportamental</h5>
                <div style="font-size: 28px; font-weight: bold; color: #e74c3c;">{percentuais['A√ß√£o Comportamental']:.1f}%</div>
                <small>Intera√ß√µes, rela√ß√µes, comunica√ß√£o</small>
            </div>
            <div style="background: linear-gradient(135deg, #fcf8e3, #ffe680); padding: 20px; border-radius: 10px; text-align: center; border: 2px solid #f39c12;">
                <h4>‚ö° A√ß√£o</h4>
                <h5>Pr√°tica</h5>
                <div style="font-size: 28px; font-weight: bold; color: #f39c12;">{percentuais['A√ß√£o Pr√°tica']:.1f}%</div>
                <small>Execu√ß√£o, resultados, efici√™ncia</small>
            </div>
        </div>
        """
        st.markdown(matriz_html, unsafe_allow_html=True)

        # 4. INTERPRETA√á√ÉO E INSIGHTS
        st.header("üí° Insights e Interpreta√ß√£o")
        
        insights = []
        
        # Insights baseados nos eixos
        if pensamento_percent > 70:
            insights.append("üß† **Texto reflexivo**: Predomin√¢ncia de elementos de pensamento e an√°lise")
        elif acao_percent > 70:
            insights.append("‚ö° **Texto ativo**: Foco em a√ß√µes, comportamentos e resultados")
        else:
            insights.append("‚öñÔ∏è **Equil√≠brio reflex√£o-a√ß√£o**: Balanceamento entre pensar e agir")
        
        if subjetivo_percent > 70:
            insights.append("üé≠ **Abordagem subjetiva**: √änfase em experi√™ncias pessoais, emo√ß√µes e perspectivas individuais")
        elif objetivo_percent > 70:
            insights.append("üìê **Abordagem objetiva**: Foco em fatos, dados e an√°lise imparcial")
        else:
            insights.append("üîÑ **Perspectiva integrada**: Combina elementos subjetivos e objetivos")
        
        # Insights baseados no sentimento
        if polarity > 0.3:
            insights.append("‚úÖ **Tom positivo**: Linguagem otimista e construtiva")
        elif polarity < -0.3:
            insights.append("‚ö†Ô∏è **Tom cr√≠tico**: Linguagem cautelosa ou negativa")
        else:
            insights.append("üîç **Tom neutro**: Abordagem equilibrada e factual")
        
        # Insights baseados na subjetividade
        if subjectivity > 0.7:
            insights.append("üí≠ **Alta subjetividade**: Forte presen√ßa de opini√µes e perspectivas pessoais")
        elif subjectivity < 0.3:
            insights.append("üìä **Baixa subjetividade**: Linguagem factual e impessoal")
        
        for insight in insights:
            st.info(insight)

        # 5. RESUMO ESTAT√çSTICO
        with st.expander("üìã Resumo Estat√≠stico Detalhado"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("Distribui√ß√£o por Categoria")
                dados_categorias = {
                    'Categoria': list(percentuais.keys()),
                    'Percentual': list(percentuais.values()),
                    'Ocorr√™ncias': list(scores.values())
                }
                df_categorias = pd.DataFrame(dados_categorias)
                st.dataframe(df_categorias, use_container_width=True)
            
            with col2:
                st.subheader("M√©tricas de Texto")
                metricas = {
                    'Metrica': ['Total de Palavras', 'Palavras-chave Encontradas', 'Densidade de Palavras-chave', 
                               'Sentimento', 'Subjetividade'],
                    'Valor': [palavras_count, total_palavras_chave, 
                             f"{(total_palavras_chave/palavras_count*100):.1f}%" if palavras_count > 0 else "0%",
                             f"{polarity:.3f}", f"{subjectivity:.3f}"]
                }
                df_metricas = pd.DataFrame(metricas)
                st.dataframe(df_metricas, use_container_width=True)
            
            st.subheader("Exemplos de Palavras Encontradas")
            palavras_encontradas = []
            for categoria, palavras_chave in categories.items():
                encontradas = [palavra for palavra in palavras_chave if re.search(r'\b' + palavra + r'\b', texto_limpo)]
                if encontradas:
                    palavras_encontradas.append(f"**{categoria}**: {', '.join(encontradas[:5])}" + 
                                              ("..." if len(encontradas) > 5 else ""))
            
            for item in palavras_encontradas:
                st.write(item)

        # 6. RECOMENDA√á√ïES
        with st.expander("üíé Recomenda√ß√µes Baseadas na An√°lise"):
            st.markdown("""
            **Para comunica√ß√£o eficaz baseada no perfil do texto:**
            
            - **Texto muito subjetivo**: Considere adicionar dados concretos para maior credibilidade
            - **Texto muito objetivo**: Pode beneficiar-se de elementos humanos e emocionais
            - **Foco excessivo em pensamento**: Inclua exemplos pr√°ticos e aplica√ß√µes
            - **Foco excessivo em a√ß√£o**: Desenvolva mais a fundamenta√ß√£o te√≥rica
            - **Tom muito negativo**: Balance com aspectos positivos e solu√ß√µes
            - **Tom muito positivo**: Inclua considera√ß√µes sobre desafios e limita√ß√µes
            """)

# Sidebar com informa√ß√µes
with st.sidebar:
    st.header("üéØ Sobre a An√°lise")
    st.markdown("""
    **Eixos Analisados:**
    
    üß† **Pensamento vs A√ß√£o**
    - Reflex√£o te√≥rica versus implementa√ß√£o pr√°tica
    
    üìä **Subjetivo vs Objetivo**
    - Experi√™ncias pessoais versus fatos mensur√°veis
    
    **Aplica√ß√µes:**
    - An√°lise de discursos
    - Avalia√ß√£o de tom de comunica√ß√£o  
    - Estilo de escrita
    - Perfil argumentativo
    - An√°lise de conte√∫do
    """)
    
    # Refer√™ncia Bibliogr√°fica
    with st.expander("üìö Refer√™ncia Bibliogr√°fica"):
        st.markdown("""
        **Base Te√≥rica:**
        
        Este sistema √© inspirado na classifica√ß√£o de Intelig√™ncia Artificial proposta por:
        
        **Russell, S. J., & Norvig, P. (2020). Artificial Intelligence: A Modern Approach (4th ed.). Pearson.**
        
        No livro, os autores categorizam a IA em quatro abordagens principais:
        - Pensar como humano
        - Agir como humano  
        - Pensar racionalmente
        - Agir racionalmente
        
        Adaptamos essas categorias para uma an√°lise textual geral, mapeando para:
        - Pensamento Subjetivo (humano) vs Objetivo (racional)
        - A√ß√£o Comportamental (humana) vs Pr√°tica (racional)
        """)
    
    st.header("üîß Instala√ß√£o")
    st.markdown("""
    ```bash
    pip install streamlit textblob matplotlib pandas
    python -m textblob.download_corpora
    ```
    """)

# Informa√ß√µes gerais
st.sidebar.markdown("---")
st.sidebar.info("""
**üìù Como usar:**
1. Cole qualquer texto na √°rea de entrada
2. Clique em "Analisar Texto"
3. Explore os diferentes tipos de an√°lise

**üîç Aplic√°vel a:**
- Artigos e not√≠cias
- Discursos e apresenta√ß√µes
- Reda√ß√µes e textos acad√™micos
- Conte√∫do de marketing
- An√°lise de comunica√ß√£o corporativa
""")
